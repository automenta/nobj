export function mitt(target = Object.create(null)) {
    const handlers = new WeakMap();
    const store = new Map();
    handlers.set(target, store);
    const get = (type) => {
        let entry = store.get(type);
        if (!entry) {
            entry = {
                ons: new Set(),
                wild: type === '*' || (typeof type === 'string' && type.endsWith('*'))
            };
            store.set(type, entry);
        }
        return entry;
    };
    const getHandlers = (type) => {
        const result = [];
        // Exact handlers first
        const exact = store.get(type);
        if (exact)
            exact.ons.forEach(h => result.push([h, false]));
        // Pattern match handlers
        store.forEach((entry, pattern) => {
            if (entry.wild && pattern !== '*') {
                const prefix = pattern.slice(0, -1);
                if (type.startsWith(prefix))
                    entry.ons.forEach(h => result.push([h, true]));
            }
        });
        // Global handlers last
        const global = store.get('*');
        if (global)
            global.ons.forEach(h => result.push([h, true]));
        return result;
    };
    return {
        on(type, handler) {
            const entry = get(type);
            let ons = entry.ons;
            ons.add(handler);
            return () => {
                ons.delete(handler);
                if (!ons.size)
                    store.delete(type);
            };
        },
        off(type, handler) {
            const entry = store.get(type);
            if (entry) {
                if (handler) {
                    entry.ons.delete(handler);
                    if (!entry.ons.size)
                        store.delete(type);
                }
                else {
                    store.delete(type);
                }
            }
        },
        emit(type, event) {
            //if (typeof type !== 'string') return;
            getHandlers(type).forEach(([handler, isGlobal]) => {
                try {
                    isGlobal ? handler(type, event) : handler(event);
                }
                catch (e) {
                    console.error('EventEmitter:', e);
                }
            });
        },
        clear() {
            store.clear();
        }
    };
}
/** default emitter */
export const events = mitt();
//# sourceMappingURL=data:application/json;base64,