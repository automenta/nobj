// src/db.ts
import * as Y from 'yjs';
import { IndexeddbPersistence } from 'y-indexeddb';
import NObject from './obj';
import { v4 as uuid } from 'uuid';
class DB {
    userID;
    doc;
    index;
    constructor(userID, provider) {
        this.userID = userID;
        this.userID = userID;
        this.doc = new Y.Doc();
        if (!provider)
            provider = new IndexeddbPersistence('todo_' + userID, this.doc);
        else
            provider.bindState(this.doc.name, this.doc);
        provider.on('synced', () => console.log('Synced'));
        this.index = this.doc.getMap('objects');
    }
    create() {
        const obj = new NObject(this.doc, uuid());
        obj.init(this.userID);
        this.index.set(obj.id, obj.toJSON());
        return obj;
    }
    get(id) {
        try {
            return new NObject(this.doc, id);
        }
        catch {
            return null;
        }
    }
    delete(id) {
        const obj = this.get(id);
        if (!obj)
            return false;
        // Cleanup references
        this.list().forEach(other => {
            if (other.replies.has(id))
                other.removeReply(id);
            if (other.repliesTo.has(id))
                other.removeReplyTo(id);
        });
        this.doc.transact(() => this.index.delete(id));
        return true;
    }
    list = () => Array.from(this.index.keys())
        .map(id => this.get(id))
        .filter((obj) => obj !== null);
    listByTag = (tag) => this.list().filter(obj => obj.tags.includes(tag));
    listByAuthor = (author) => this.list().filter(obj => obj.author === author);
    search = (query) => {
        const q = query.toLowerCase();
        return this.list().filter(obj => obj.name.toLowerCase().includes(q) ||
            obj.tags.some(tag => tag.toLowerCase().includes(q)));
    };
    createReply(parentId, name) {
        const parent = this.get(parentId);
        if (!parent)
            return null;
        const reply = this.create();
        reply.name = name;
        reply.addReplyTo(parentId);
        parent.addReply(reply.id);
        return reply;
    }
    getReplies = (id) => Array.from(this.get(id)?.replies ?? [])
        .map(rid => this.get(rid))
        .filter((r) => r !== null);
    getRepliesTo = (id) => Array.from(this.get(id)?.repliesTo ?? [])
        .map(pid => this.get(pid))
        .filter((p) => p !== null);
    // observe = (fn: Observer): void => this.index.observe(fn);
    // observeObject = (id: string, fn: Observer): void =>
    //     this.get(id)?.observe(fn);
    objText(pageId) {
        const page = this.get(pageId);
        return page ? page.text : null;
    }
    objName(pageId, title) {
        const page = this.get(pageId);
        if (page)
            page.name = title;
    }
    objPublic(pageId, isPublic) {
        const page = this.get(pageId);
        if (page)
            page.public = isPublic;
    }
}
export default DB;
//# sourceMappingURL=data:application/json;base64,