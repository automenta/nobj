import * as Y from "yjs";
export default class NObject {
    doc;
    id;
    root;
    constructor(doc, id) {
        this.doc = doc;
        this.id = id;
        this.id = id;
        this.root = doc.getMap(id);
    }
    init(author) {
        const now = Date.now();
        this.doc.transact(() => {
            this.root.set('content', new Y.Text());
            const links = new Y.Map();
            links.set('reply', new Y.Array());
            links.set('replyTo', new Y.Array());
            this.root.set('links', links);
            const meta = new Y.Map();
            meta.set('id', this.id);
            meta.set('name', '?');
            meta.set('created', now);
            meta.set('updated', now);
            meta.set('public', false);
            meta.set('author', author);
            meta.set('tags', new Y.Array());
            this.root.set('metadata', meta);
        });
    }
    // Transactional property access
    transact(fn) {
        return this.doc.transact(() => {
            const result = fn();
            this.root.get('metadata').set('updated', Date.now());
            return result;
        });
    }
    get created() { return this.root.get('metadata').get('created'); }
    get updated() { return this.root.get('metadata').get('updated'); }
    get name() { return this.root.get('metadata').get('name'); }
    set name(v) { this.transact(() => this.root.get('metadata').set('name', v)); }
    get public() { return this.root.get('metadata').get('public'); }
    set public(v) { this.transact(() => this.root.get('metadata').set('public', v)); }
    get author() { return this.root.get('metadata').get('author'); }
    set author(v) { this.transact(() => this.root.get('metadata').set('author', v)); }
    get text() { return this.root.get('content'); }
    setText(newText) {
        this.transact(() => {
            const t = this.text;
            t.delete(0, t.length);
            t.insert(0, newText.toString());
        });
    }
    // Collections with automatic transactions
    get tags() { return this.root.get('metadata').get('tags').toArray(); }
    get replies() { return new Set(this.root.get('links').get('reply')); }
    get repliesTo() { return new Set(this.root.get('links').get('replyTo')); }
    updateCollection(type, value, add) {
        this.transact(() => {
            let arr = type === 'tags'
                ? this.root.get('metadata').get('tags')
                : this.root.get('links').get(type);
            if (add) {
                arr.push([value]);
            }
            else if (!add) {
                const idx = arr.indexOf(value);
                if (idx !== -1)
                    arr.delete(idx, 1);
            }
        });
    }
    // Collection operations
    addTag = (tag) => this.updateCollection('tags', tag, true);
    removeTag = (tag) => this.updateCollection('tags', tag, false);
    addReply = (id) => this.updateCollection('reply', id, true);
    removeReply = (id) => this.updateCollection('reply', id, false);
    addReplyTo = (id) => this.updateCollection('replyTo', id, true);
    removeReplyTo = (id) => this.updateCollection('replyTo', id, false);
    toJSON() {
        return {
            metadata: {
                id: this.id,
                name: this.name,
                created: this.created,
                updated: this.updated,
                public: this.public,
                author: this.author,
                tags: this.tags
            },
            text: this.text.toString(),
            links: {
                reply: this.replies,
                replyTo: this.repliesTo
            }
        };
    }
    observe(fn) {
        this.root.observeDeep(fn);
    }
    unobserve(fn) {
        this.root.unobserveDeep(fn);
    }
}
//# sourceMappingURL=data:application/json;base64,