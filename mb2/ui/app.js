import $ from 'jquery';
import DB from '../src/db';
import Network from '../src/net';
import SideBar from './sidebar';
import Editor from "./editor";
import Matching from "../src/match.js";
import { io } from "socket.io-client";
import '/ui/css/app.css';
export default class App {
    channel;
    db;
    net;
    match;
    editor;
    socket; // Socket.IO client
    ele;
    constructor(userID, channel) {
        this.channel = channel;
        this.db = new DB(userID);
        this.net = new Network(this.channel, this.db);
        this.match = new Matching(this.db, this.net);
        this.ele = $('<div>').addClass('container');
        const mainView = $('<div class="main-view"></div>');
        this.ele.append(mainView);
        this.editor = new Editor(mainView, this.db, this.awareness.bind(this), this);
        this.ele.prepend(new SideBar(this).ele); //HACK add last
        // Socket.IO connection
        this.socket = io();
        this.socket.on('connect', () => {
            console.log('Connected to server');
        });
        this.socket.on('snapshot', (snap) => {
            console.log('Received snapshot:', snap);
            // Process snapshot data (e.g., display it)
        });
        this.socket.on('plugin-status', (plugins) => {
            console.log('Plugin status:', plugins);
            // Update UI to reflect plugin status
        });
        this.socket.on('plugin-error', (pluginName, error) => {
            console.error(`Plugin ${pluginName} error:`, error);
            // Display error message to the user
        });
    }
    user() { return this.net.user(); }
    awareness() { return this.net.awareness(); }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUN2QixPQUFPLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDM0IsT0FBTyxPQUFPLE1BQU0sWUFBWSxDQUFDO0FBQ2pDLE9BQU8sT0FBTyxNQUFNLFdBQVcsQ0FBQztBQUNoQyxPQUFPLE1BQU0sTUFBTSxVQUFVLENBQUM7QUFDOUIsT0FBTyxRQUFRLE1BQU0saUJBQWlCLENBQUM7QUFDdkMsT0FBTyxFQUFFLEVBQUUsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXRDLE9BQU8saUJBQWlCLENBQUM7QUFHekIsTUFBTSxDQUFDLE9BQU8sT0FBTyxHQUFHO0lBQ0gsT0FBTyxDQUFTO0lBRXhCLEVBQUUsQ0FBSztJQUNQLEdBQUcsQ0FBVTtJQUNiLEtBQUssQ0FBVztJQUNoQixNQUFNLENBQVM7SUFDaEIsTUFBTSxDQUFNLENBQUMsbUJBQW1CO0lBRWpDLEdBQUcsQ0FBUztJQUVuQixZQUFZLE1BQWEsRUFBRSxPQUFjO1FBQ3JDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBRXZCLElBQUksQ0FBQyxFQUFFLEdBQUcsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUU5QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTdDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUU1QyxNQUFNLFFBQVEsR0FBRyxDQUFDLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUUxQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRTdFLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsZUFBZTtRQUV4RCx1QkFBdUI7UUFDdkIsSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLEVBQUUsQ0FBQztRQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1lBQzNCLE9BQU8sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztRQUN2QyxDQUFDLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFVBQVUsRUFBRSxDQUFDLElBQUksRUFBRSxFQUFFO1lBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDeEMsMkNBQTJDO1FBQy9DLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUU7WUFDeEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN2QyxxQ0FBcUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxVQUFVLEVBQUUsS0FBSyxFQUFFLEVBQUU7WUFDakQsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLFVBQVUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ3BELG9DQUFvQztRQUN4QyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxJQUFJLEtBQUssT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNsQyxTQUFTLEtBQUssT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztDQUMvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAkIGZyb20gJ2pxdWVyeSc7XG5pbXBvcnQgREIgZnJvbSAnLi4vc3JjL2RiJztcbmltcG9ydCBOZXR3b3JrIGZyb20gJy4uL3NyYy9uZXQnO1xuaW1wb3J0IFNpZGVCYXIgZnJvbSAnLi9zaWRlYmFyJztcbmltcG9ydCBFZGl0b3IgZnJvbSBcIi4vZWRpdG9yXCI7XG5pbXBvcnQgTWF0Y2hpbmcgZnJvbSBcIi4uL3NyYy9tYXRjaC5qc1wiO1xuaW1wb3J0IHsgaW8gfSBmcm9tIFwic29ja2V0LmlvLWNsaWVudFwiO1xuXG5pbXBvcnQgJy91aS9jc3MvYXBwLmNzcyc7XG5pbXBvcnQge0luZGV4ZWRkYlBlcnNpc3RlbmNlfSBmcm9tIFwieS1pbmRleGVkZGJcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQXBwIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNoYW5uZWw6IHN0cmluZztcblxuICAgIHJlYWRvbmx5IGRiOiBEQjtcbiAgICByZWFkb25seSBuZXQ6IE5ldHdvcms7XG4gICAgcmVhZG9ubHkgbWF0Y2g6IE1hdGNoaW5nO1xuICAgIHJlYWRvbmx5IGVkaXRvcjogRWRpdG9yO1xuICAgIHByaXZhdGUgc29ja2V0OiBhbnk7IC8vIFNvY2tldC5JTyBjbGllbnRcblxuICAgIHB1YmxpYyBlbGU6IEpRdWVyeTtcblxuICAgIGNvbnN0cnVjdG9yKHVzZXJJRDpzdHJpbmcsIGNoYW5uZWw6c3RyaW5nKSB7XG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XG5cbiAgICAgICAgdGhpcy5kYiA9IG5ldyBEQih1c2VySUQpO1xuICAgICAgICB0aGlzLm5ldCA9IG5ldyBOZXR3b3JrKHRoaXMuY2hhbm5lbCwgdGhpcy5kYik7XG5cbiAgICAgICAgdGhpcy5tYXRjaCA9IG5ldyBNYXRjaGluZyh0aGlzLmRiLCB0aGlzLm5ldCk7XG5cbiAgICAgICAgdGhpcy5lbGUgPSAkKCc8ZGl2PicpLmFkZENsYXNzKCdjb250YWluZXInKTtcblxuICAgICAgICBjb25zdCBtYWluVmlldyA9ICQoJzxkaXYgY2xhc3M9XCJtYWluLXZpZXdcIj48L2Rpdj4nKTtcbiAgICAgICAgdGhpcy5lbGUuYXBwZW5kKG1haW5WaWV3KTtcblxuICAgICAgICB0aGlzLmVkaXRvciA9IG5ldyBFZGl0b3IobWFpblZpZXcsIHRoaXMuZGIsIHRoaXMuYXdhcmVuZXNzLmJpbmQodGhpcyksIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuZWxlLnByZXBlbmQobmV3IFNpZGVCYXIodGhpcykuZWxlKTsgLy9IQUNLIGFkZCBsYXN0XG5cbiAgICAgICAgLy8gU29ja2V0LklPIGNvbm5lY3Rpb25cbiAgICAgICAgdGhpcy5zb2NrZXQgPSBpbygpO1xuICAgICAgICB0aGlzLnNvY2tldC5vbignY29ubmVjdCcsICgpID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdDb25uZWN0ZWQgdG8gc2VydmVyJyk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNvY2tldC5vbignc25hcHNob3QnLCAoc25hcCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1JlY2VpdmVkIHNuYXBzaG90OicsIHNuYXApO1xuICAgICAgICAgICAgLy8gUHJvY2VzcyBzbmFwc2hvdCBkYXRhIChlLmcuLCBkaXNwbGF5IGl0KVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zb2NrZXQub24oJ3BsdWdpbi1zdGF0dXMnLCAocGx1Z2lucykgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ1BsdWdpbiBzdGF0dXM6JywgcGx1Z2lucyk7XG4gICAgICAgICAgICAvLyBVcGRhdGUgVUkgdG8gcmVmbGVjdCBwbHVnaW4gc3RhdHVzXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnNvY2tldC5vbigncGx1Z2luLWVycm9yJywgKHBsdWdpbk5hbWUsIGVycm9yKSA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGBQbHVnaW4gJHtwbHVnaW5OYW1lfSBlcnJvcjpgLCBlcnJvcik7XG4gICAgICAgICAgICAvLyBEaXNwbGF5IGVycm9yIG1lc3NhZ2UgdG8gdGhlIHVzZXJcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgdXNlcigpIHsgcmV0dXJuIHRoaXMubmV0LnVzZXIoKTsgfVxuICAgIGF3YXJlbmVzcygpIHsgcmV0dXJuIHRoaXMubmV0LmF3YXJlbmVzcygpOyB9XG59XG4iXX0=